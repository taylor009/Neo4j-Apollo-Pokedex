import { typeDefs } from './graphql-schema';
import { ApolloServer } from "apollo-server-express";
import express from 'express';
import { v1 as neo4j} from 'neo4j-driver';
import { makeAugmentedSchema } from "neo4j-graphql-js";
import path from "path";
import dotenv from "dotenv";

// set environment variables from ../.env
dotenv.config();


const app = express();


/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
	typeDefs
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
	process.env.NEO4J_URI || "bolt://hobby-ogpcdaagodbggbkeijdhncel.dbs.graphenedb.com:247877",
	neo4j.auth.basic(
		process.env.NEO4J_USER || "taylor",
		process.env.NEO4J_PASSWORD || "b.yAlEBMPMpAc2.xwb55v8DUscVQSCv"
	)
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
	context: { driver },
	schema: schema,
	introspection: true,
	playground: true
});

// Specify port and path for GraphQL endpoint
const port = process.env.GRAPHQL_LISTEN_PORT || 4001;
const gqlPath = "/graphql";
if(process.env.NODE_ENV === 'production') {
	app.use(express.static(path.join(__dirname, 'client/build')));

	app.get('*', (req, res) => {
		res.sendFile(path.join(__dirname, 'client/build', 'index.html'))
	});

	server.applyMiddleware({app, gqlPath})
}

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */

server.applyMiddleware({app, gqlPath});
app.listen({port, gqlPath}, () => {
	console.log(`GraphQL server ready at http://localhost:${port}${gqlPath}`);
});
